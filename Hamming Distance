461. Hamming Distance
The Hamming distance between two integers is the number of positions at which the corresponding bits are different.

Given two integers x and y, return the Hamming distance between them.
Example 1:
Input: x = 1, y = 4
Output: 2
Explanation:
1   (0 0 0 1)
4   (0 1 0 0)
       ↑   ↑
The above arrows point to positions where the corresponding bits are different.
Example 2:

Input: x = 3, y = 1
Output: 1
 

Constraints:

0 <= x, y <= 231 - 1
To calculate the no.of bits diff in two numbers we use this algorithm
let x=4,y=1
cal xor=x^y=5 
make xor=xor&xor-1 until xor becomes zero and count every time the loop runs
while(xor!=0)
  iteration 1:
    xor&=xor-1 #xor==4
    count++
  iteration 2:
    xor&=xor-1   #xor==0  
    count++
 print(count) # now count is the no.of bits difference
      
class Solution:
    def hammingDistance(self, x: int, y: int) -> int:
        xor=x^y
        c=0
        while(xor):
            xor&=xor-1
            c+=1
        return c
       
