678. Valid Parenthesis String
Given a string s containing only three types of characters: '(', ')' and '*', return true if s is valid.

The following rules define a valid string:
Any left parenthesis '(' must have a corresponding right parenthesis ')'.
Any right parenthesis ')' must have a corresponding left parenthesis '('.
Left parenthesis '(' must go before the corresponding right parenthesis ')'.
'*' could be treated as a single right parenthesis ')' or a single left parenthesis '(' or an empty string "".
 Example 1:
Input: s = "()"
Output: true
Example 2:
Input: s = "(*)"
Output: true
Example 3:
Input: s = "(*))"
Output: true

solution:

class Solution:
    def checkValidString(self, s: str) -> bool:
        stack=[]
        star=[]
        for  i in range(len(s)):
            if s[i]=='(':
                stack.append(i)
            elif s[i]=='*':
                star.append(i)
            else:
                if len(stack)>0:
                    stack.pop()
                elif len(star)>0:
                    star.pop()
                else:
                    return False
        while(len(stack)):
            if len(star)==0:
                return False
            elif stack[-1]<star[-1]:
                star.pop()
                stack.pop()
            else:
                return False
        return True
                
