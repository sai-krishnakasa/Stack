921. Minimum Add to Make Parentheses Valid
A parentheses string is valid if and only if:
It is the empty string,
It can be written as AB (A concatenated with B), where A and B are valid strings, or
It can be written as (A), where A is a valid string.
You are given a parentheses string s. In one move, you can insert a parenthesis at any position of the string.
For example, if s = "()))", you can insert an opening parenthesis to be "(()))" or a closing parenthesis to be "())))".
Return the minimum number of moves required to make s valid.
Example 1:
Input: s = "())"
Output: 1
Example 2:
Input: s = "((("
Output: 3
Solution:
Approach:
      # our aim is to find the how many parenthsis needed to make the given parenthsis as valid 
      # for that ,we have find out how many elements remained in the stack, we need exctly those many no.of parenthesis to balance it
      # so return the length of the stack which is the length needed to make the given parenthesis valid
class Solution:
    def minAddToMakeValid(self, s: str) -> int:
        stack=[]
        for i in range(len(s)):
            if len(stack)>0 and s[i]==')' and stack[-1]=='(':
                stack.pop()
            else:
                stack.append(s[i])
        return len(stack)
